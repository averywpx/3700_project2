#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

import ipaddress
from ipaddress import IPv4Network


##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"



##########################################################################################

class Router:
  """ Your Router """

  def __init__(self, asn, networks):
    # the asn from command line
    self.asn = asn[0]
    # key: network ip address we can send to -> val: port ip to send out
    self.routes = {}
    # key: network ip address we can send to -> val: update that came with it
    self.routesAndUpdates = {}
    # key: port/src ip address -> val: [update messages]
    self.updates = {}
    # key: port/src ip address -> val: one of CUST PEER PROV
    self.relations = {}
    # key: port/src ip address -> val: literally the socket
    self.sockets = {}
    # key: portion of netmask address -> val: number of bits
    self.maskConvTable = {"255": 8, "254": 7, "252": 6, "248": 5, "240": 4, "224": 3, "192": 2, "128": 1, "0": 0}


    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    # TODO
    outroutes = []
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    # TODO
    outroutes = []
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    # TODO
    outroutes = []
    return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    peer = None
    routes = self.lookup_routes(daddr)
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      # TODO
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
    return self.sockets[peer] if peer else None



  def forward(self, srcif, packet):
    """ Forward a data packet """
    # TODO

    # find all possible networks from forwarding table
    ports = self.allPossible(packet["dst"])

    # enforce peering relationships
    ports = self.filterRelationships(ports, srcif)

    # get the one with the highest netmask
    sock = self.getLongestPrefix(ports)

    # send to the socket or send no route back to source
    if sock == None:
      self.sendNoRoute(srcif, packet)
    else:
      self.forwardData(sock, packet)

    return False


  # forwards data to the sock
  def forwardData(self, sock, packet):
    packetJSON = json.dumps(packet)
    packetJSON = packetJSON.encode("ASCII")
    sock.send(packetJSON)

    return False

  # sends a no route back to the source
  def sendNoRoute(self, srcif, packet):
    srcifSplit = srcif.split(".")
    srcifSplit[-1] = "1"
    srcUs = ".".join(srcifSplit)

    noRouteMessage = {"src": srcUs, "dst": packet["src"], "type": "no route", "msg": {}}
    packetJSON = json.dumps(noRouteMessage)
    packetJSON = packetJSON.encode("ASCII")
    self.sockets[srcif].send(packetJSON)

    return False

  # returns socket for the highest prefix or none for nothing
  def getLongestPrefix(self, ports):
    sock = None

    longestPref = 0
    longestNetwork = ""

    for key in ports:
      pref = key.split("/")[1]

      if int(pref) > longestPref:
        longestPref = pref
        longestNetwork = key

    if longestPref == 0:
      return None

    sock = self.sockets[ports[longestNetwork]]

    return sock

  # filter based on neigbor relationships
  def filterRelationships(self, ports, srcif):

    if self.relations[srcif] != CUST:
      for key in ports:
        if self.relations[ports[key]] != CUST:
          del ports[key]

    return ports


  # get all network matches
  def allPossible(self, dstAddress):
    # key: network address -> val: port ip address
    ports = {}

    for key in self.routes:
      #network, mask = knownNetworks[i].split("/")
      #splitNetwork = knownNetworks[i].split(".")
      if ipaddress.ip_address(dstAddress) in ipaddress.ip_network(key):
        ports[key] = self.routes.get(key)

    return ports

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False



    # handles getting an update message, checks if new path is better
    # than old, updates forwarding table accordingly
  def update(self, srcif, packet):
    """ handle update packets """
    # check if updates map has seen the source ip yet
    # adds the packet message to the list of updates
    if (self.updates.get(srcif) == None):
      self.updates[srcif] = [packet]
    else:
      self.updates[srcif].append(packet)

    # get the network address by using the netmask
    networkAddress = self.calculateNetAddress(packet["msg"]["network"], packet["msg"]["netmask"])

    # check if there is an entry in the forwarding table yet
    # replace the entry if new path is the best path
    if (self.routes.get(networkAddress) == None):
      self.routes[networkAddress] = packet["src"]
      self.routesAndUpdates[networkAddress] = packet
    elif (self.isBestPath(packet, self.routesAndUpdates[networkAddress])):
      print("I AM HERE")
      self.routes[networkAddress] = packet["src"]
      self.routesAndUpdates[networkAddress] = packet

    # forward the update
    self.forwardUpdate(srcif, packet)
    print("FORWARDING TABLE: %s" % self.routes)
    return False

  # calculates a network address using the given netmask
  def calculateNetAddress(self, address, mask):
    # accumulator, total number of bits for netmask
    maskVal = 0

    # split netmask into an array
    maskArr = mask.split(".")
    # accumulate the bits for the netmask
    for i in range(len(maskArr)):
      if (self.maskConvTable.get(maskArr[i]) == None):
        print("BIT MASK DOESNT EXIST: %s" % maskArr[i])
        raise KeyError
      maskVal += self.maskConvTable[maskArr[i]]

    return address + "/" + str(maskVal)


  # Forwards an udapte packet to the correct ports
  def forwardUpdate(self, srcif, packet):
    # add ourselves to the as path
    packet["msg"]["ASPath"].append(self.asn)
    ogSrc = packet["src"]
    # check if sender was a customer
    if (self.relations[ogSrc] == CUST):
      # send to all other sockets
      for key in self.sockets:
        if key != srcif:
          packet["dst"] = key
          keyTemp = key.split(".")
          keyTemp[-1] = "1"
          keyTemp = ".".join(keyTemp)
          packet["src"] = keyTemp
          packetJSON = json.dumps(packet)
          packetJSON = packetJSON.encode("ASCII")
          self.sockets[key].send(packetJSON)

    # must have beena PEER or PROV
    else:
      for key in self.relations:
        if (self.relations[key] == CUST) and (key != srcif):
          packet["dst"] = key
          keyTemp = key.split(".")
          keyTemp[-1] = "1"
          keyTemp = ".".join(keyTemp)
          packet["src"] = keyTemp
          packetJSON = json.dumps(packet)
          packetJSON = packetJSON.encode("ASCII")
          self.sockets[key].send(packetJSON)



    # compares the new path with the old path
    # returns true if new is better
    # false if old is better
  def isBestPath(self, newPacket, oldPacket):
    msg = 'msg'
    localpref = 'localpref'
    selfOrigin = 'selfOrigin'
    ASPATH = 'ASPath'
    origin = 'origin'

    print(type(newPacket))
    print(type(oldPacket))
    print(type(newPacket[msg][localpref]))

    # CHECK FOR HIGHEST LOCAL PATH
    if (newPacket[msg][localpref] > oldPacket[msg][localpref]):
      return True
    elif (newPacket[msg][localpref] < oldPacket[msg][localpref]):
      return False
    # CHECK FOR ORIGIN
    if (newPacket[msg][selfOrigin] and not(oldPacket[msg][selfOrigin])):
      return True
    elif (not(newPacket[msg][selfOrigin]) and (oldPacket[msg][selfOrigin])):
      return False

    # CHECK ASPATH
    if (len(newPacket[msg][ASPATH]) < len(oldPacket[msg][ASPATH])):
      return True
    elif (len(newPacket[msg][ASPATH]) > len(oldPacket[msg][ASPATH])):
      return False

    # CHECK ORIGIN IGP
    if ((newPacket[msg][origin] == "IGP") and (not(oldPacket[msg][origin]) == "IGP")):
      return True
    elif ((not(newPacket[msg][origin]) == "IGP") and (oldPacket[msg][origin] == "IGP")):
      return False

    # CHECK ORIGIN EGP
    if ((newPacket[msg][origin] == "EGP") and (not(oldPacket[msg][origin]) == "EGP")):
      return True
    elif ((not(newPacket[msg][origin]) == "EGP") and (oldPacket[msg][origin] == "EGP")):
      return False

    # CHECK ORIGIN UNK
    if ((newPacket[msg][origin] == "UNK") and (not(oldPacket[msg][origin]) == "UNK")):
      return True
    elif ((not(newPacket[msg][origin]) == "UNK") and (oldPacket[msg][origin] == "UNK")):
      return False

    # RETURN LOWER IP ADDRESS

    # TODOTODOTODOTODOTODO
    newIP = ipaddress.IPv4Address(newPacket['src'])
    oldIP = ipaddress.IPv4Address(oldPacket['src'])
    return (newIP < oldIP)



  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    return True

  def dump(self, packet, srcif):
    """ handles dump table requests """
    fowardTable = []

    for key in self.routes:
      network, cidr = key.split("/")
      netmask = str(IPv4Network(key).netmask)
      peer = self.routes[key]
      entry = {"network": network, "netmask": netmask, "peer": peer}
      fowardTable.append(entry)

    # TODO
    dumpMsg = {"src": packet["dst"], "dst": packet["src"], "type": "table", "msg": fowardTable}

    packetJSON = json.dumps(dumpMsg)
    packetJSON = packetJSON.encode("ASCII")
    self.sockets[srcif].send(packetJSON)
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """

    print("PACKET RECIEVED: %s" % packet)
    msgType = packet['type']

    if (msgType == 'update'):
      self.update(srcif, packet)

    if (msgType == 'data'):
      self.forward(srcif, packet)

    if (msgType == 'dump'):
      self.dump(packet, srcif)



    # TODO
    return False

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar="asn", type=int, nargs=1, help="asn")
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn, ARGS.networks).run()
