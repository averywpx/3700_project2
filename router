#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

import ipaddress


##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """

  def __init__(self, asn, networks):
    # the asn from command line
    self.asn = asn
    # key: network ip address we can send to -> val: update message
    self.routes = {}
    # key: port/src ip address -> val: [update messages]
    self.updates = {}
    # key: port/src ip address -> val: one of CUST PEER PROV
    self.relations = {}
    # key: port/src ip address -> val: literally the socket
    self.sockets = {}
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    # TODO
    outroutes = []
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    # TODO
    outroutes = []
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    # TODO
    outroutes = []
    return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    peer = None
    routes = self.lookup_routes(daddr)
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      # TODO
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
    return self.sockets[peer] if peer else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    # TODO
    return False

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False



    # handles getting an update message, checks if new path is better
    # than old, updates forwarding table accordingly
  def update(self, srcif, packet):
    """ handle update packets """
    # check if updates map has seen the source ip yet
    # adds the packet message to the list of updates
    if (self.updates.get(srcif) == None):
      self.updates[srcif] = [packet]
    else:
      self.updates[srcif].append(packet)

    # check if there is an entry in the forwarding table yet
    # replace the entry if new path is the best path
    if (self.routes.get(packet["msg"]["network"]) == None):
      self.routes[packet["msg"]["network"]] = packet
    elif (self.isBestPath(packet, self.routes[packet["msg"]["network"]])):
      self.routes[packet["msg"]["network"]] = packet

    # TODO

    print(self.updates)
    print(self.routes)

    return False

  # compares the new path with the old path
  # returns true if new is better
  # false if old is better
  def isBestPath(self, newPacket, oldPacket):
    # CHECK FOR HIGHEST LOCAL PATH
    if (newPacket[msg][localpref] > oldPacket[msg][localpref]):
      return True
    elif (newPacket[msg][localpref] < oldPacket[msg][localpref]):
      return False
    # CHECK FOR ORIGIN
    if (newPacket[msg][selfOrigin] and not(oldPacket[msg][selfOrigin])):
      return True
    elif (not(newPacket[msg][selfOrigin]) and oldPacket[msg][selfOrigin]):
      return False

    # CHECK ASPATH
    if (len(newPacket[msg][ASPATH]) < len(oldPacket[msg][ASPATH])):
      return True
    elif (len(newPacket[msg][ASPATH]) > len(oldPacket[msg][ASPATH])):
      return False

    # CHECK ORIGIN IGP
    if ((newPacket[msg][origin] == "IGP") and (not(oldPacket[msg][origin]) == "IGP")):
      return True
    elif ((not(newPacket[msg][origin]) == "IGP") and (oldPacket[msg][origin] == "IGP")):
      return False

    # CHECK ORIGIN EGP
    if ((newPacket[msg][origin] == "EGP") and (not(oldPacket[msg][origin]) == "EGP")):
      return True
    elif ((not(newPacket[msg][origin]) == "EGP") and (oldPacket[msg][origin] == "EGP")):
      return False

    # CHECK ORIGIN UNK
    if ((newPacket[msg][origin] == "UNK") and (not(oldPacket[msg][origin]) == "UNK")):
      return True
    elif ((not(newPacket[msg][origin]) == "UNK") and (oldPacket[msg][origin] == "UNK")):
      return False

    # RETURN LOWER IP ADDRESS
    return newPacket["src"] < oldPacket["src"]



  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    return True

  def dump(self, packet):
    """ handles dump table requests """
    # TODO
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    msgType = packet['type']

    if (msgType == 'update'):
      self.update(srcif, packet)


    # TODO
    return False

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar="asn", type=int, nargs=1, help="asn")
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn, ARGS.networks).run()
